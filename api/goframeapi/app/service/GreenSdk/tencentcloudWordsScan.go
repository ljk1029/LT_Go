package GreenSdk

import (
	"encoding/json"
	"fmt"
	"github.com/gogf/gf/encoding/gbase64"
	"github.com/gogf/gf/frame/g"
	"github.com/gogf/gf/util/gconv"
	cms "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/cms/v20190321"
	"github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common"
	"github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common/errors"
	"github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common/profile"
)
type AutoGeneratedT struct {
	Response Response `json:"Response"`
	Retcode int `json:"retcode"`
	Retmsg string `json:"retmsg"`
}
type Common struct {
}
type DetailResult struct {
	EvilLabel string `json:"EvilLabel"`
	EvilType int `json:"EvilType"`
	Keywords []string `json:"Keywords"`
	Score int `json:"Score"`
}
type ID struct {
}
type Res struct {
}
type DataT struct {
	BizType int `json:"BizType"`
	Common Common `json:"Common"`
	DetailResult []DetailResult `json:"DetailResult"`
	EvilFlag int `json:"EvilFlag"`
	EvilLabel string `json:"EvilLabel"`
	EvilType int `json:"EvilType"`
	ID ID `json:"ID"`
	Keywords []string `json:"Keywords"`
	Res Res `json:"Res"`
	Score int `json:"Score"`
	Suggestion string `json:"Suggestion"`
}
type Response struct {
	BusinessCode int `json:"BusinessCode"`
	Data DataT `json:"Data"`
	RequestID string `json:"RequestId"`
}
func TencenCloudWordsScan(words string,sug string) string {

	credential := common.NewCredential(
		g.Cfg().GetString("TencentSafe.SecretId"),
		g.Cfg().GetString("TencentSafe.SecretKey"),
	)
	cpf := profile.NewClientProfile()
	cpf.HttpProfile.Endpoint = "cms.tencentcloudapi.com"
	client, _ := cms.NewClient(credential, "ap-beijing", cpf)

	request := cms.NewTextModerationRequest()

	request.Content = common.StringPtr(gbase64.EncodeString(words))

	response, err := client.TextModeration(request)
	if _, ok := err.(*errors.TencentCloudSDKError); ok {
		fmt.Printf("An API error has returned: %s", err)
		return ""
	}
	if err != nil {
		panic(err)
	}
	var revMsg AutoGeneratedT
	err1 := json.Unmarshal([]byte(response.ToJsonString()), &revMsg)
	if err1 != nil {
		return err1.Error()
	}
	var str string
	if revMsg.Response.BusinessCode == 0 {
		fmt.Println(revMsg.Response.Data.Suggestion)
		if revMsg.Response.Data.EvilFlag == 1 {
			results := revMsg.Response.Data.DetailResult
			for _, v := range results {
				for _, value := range v.Keywords {
					str += value
				}
				if len(str) < gconv.Int(g.Cfg("config").GetString("Tips.wordsSugTip")) && len(str) > 0 {
					return sug+":"+str
				}
				return sug
			}
		}
	}
	return ""
}